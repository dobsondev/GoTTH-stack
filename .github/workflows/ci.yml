name: Build and Test Application

on:
  pull_request: 
    branches: [ "main" ]

jobs:
  compile-tailwind:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Install Tailwind CSS CLI
        run: bun install @tailwindcss/cli

      - name: Compile Tailwind CSS
        run: bunx @tailwindcss/cli -i ./static/css/input.css -o ./static/css/output.css --minify
        
      - name: Upload CSS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: css-build
          path: static/css/output.css

  extract-go-version:
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.go-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract Go version from Dockerfile
        id: go-version
        run: |
          GO_VERSION=$(grep -oP 'FROM golang:\K[0-9.]+' Dockerfile || echo "1.21")
          echo "version=$GO_VERSION" >> $GITHUB_OUTPUT
          echo "Found Go version: $GO_VERSION"

  compile-go:
    runs-on: ubuntu-latest
    needs: extract-go-version
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.extract-go-version.outputs.go-version }}

      - name: Display Go version
        run: go version

      - name: Install Dependencies
        run: go get .

      - name: Build
        run: go build -v ./...

  test-go:
    runs-on: ubuntu-latest
    needs: extract-go-version
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.extract-go-version.outputs.go-version }}

      - name: Run Go Tests
        run: go test -v ./...
  
  build-docker-image:
    runs-on: ubuntu-latest
    needs: [compile-go, test-go, compile-tailwind]
    steps:
      - uses: actions/checkout@v4
      
      - name: Download CSS artifacts
        uses: actions/download-artifact@v4
        with:
          name: css-build
          path: static/css/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: gotth-stack:${{ github.sha }}
          outputs: type=docker,dest=/tmp/gotth-stack-image.tar
      
      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/gotth-stack-image.tar

  integration:
    runs-on: ubuntu-latest
    needs: [build-docker-image]
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
      
      - name: Load Docker image
        run: |
          docker load --input /tmp/gotth-stack-image.tar
      
      - name: Start Docker container
        run: |
          docker run -d -p 3000:3000 --name gotth-app gotth-stack:${{ github.sha }}
          # Wait for app to start
          sleep 5
      
      - name: Install Newman
        run: npm install -g newman
      
      - name: Run Postman tests
        run: |
          for file in postman/*.json; do
            if [ -f "$file" ]; then
              echo "Running tests from $file"
              newman run "$file" \
                --env-var "scheme=http" \
                --env-var "url=localhost:3000" \
                --reporters cli,json \
                --reporter-json-export build/report/$(basename $file .json)-results.json
            fi
          done
        
      - name: Upload Postman results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Postman Test Results
          path: build/report
      
      - name: Container logs
        if: always()
        run: docker logs gotth-app
      
      - name: Stop Docker container
        if: always()
        run: docker stop gotth-app && docker rm gotth-app